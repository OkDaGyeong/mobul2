----------------------------  참고
spring.jpa.hibernate.ddl-auto:  뒤에  붙을 명령어

- create
테이블이 없을 경우 테이블 생성하는 옵션(이 때 DB 가 전부 날아가기 때문에, create로 해놓으면 실행시마다 DB 가 날아간다. )

- create-drop
테스트 환경에 적합한 옵션. 테스트 실행 시 mock data를 위해 table을 생성하고 테스트 종료 후 테이블을 삭제시킨다.

- validate
application 실행 시  @Entity들과 이미 존재하는 테이블(schema)가 정상적으로 맵핑되었는지 판단하여 만약 @Entity 와 테이블이 제대로 맵핑되지 않으면 application이 실행되지 않는다.

- update
이미 테이블이 존재하는 상황에서 @Entity에 속성이 추가될 경우, 기존의 테이블의 데이터에는 변화 없이 새로운 컬럼을 추가해준다.

- none
아무 작업도 하지 않는다.


------------------ persistence.xml 영속성 데이터베이스 관리 JPA 전용 .xml




------------ @Column 참조
// columnDefinition = "TEXT" << Type을 TEXT로 하겠다
@Column(name="board_content", nullable = false, columnDefinition = "TEXT")

// columnDefinition = "integer default 0"  타입을 integer로 하고 초기값을 0으로 하겠다.
@Column(name="board_like", columnDefinition = "integer default 0" )



------- @폴리건키 설정
------- @ 외래키 설정
user_id
    // 포린키를 생성시는 꼭 클래스의 객체를 만들어 줘야 한다
    // users 객체가 user_id 칼럼이 되고
    // users 의 user_id  동작이 같이 ...
    //  여기에 따로 지정 해주는 객체가 없는 이유가
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")  // 포린키 설정
    private Users users;          JoinColumn  -- 참조할  테이블 명 입력


    @OneToMany(mappedBy = "users")
    private List<Boards> board_writer;


----- .yml 파일은 파이썬 같은 느낌으로 들여쓰기에 맞춰 ...
spring:
    jpa:
      properties:
         hibernate:
         ## 주석 표시
            use_sql_comments: true

          ## 쿼리 들여쓰기 등의 포맷에 맞춰 표출
            format_sql: true


          ## 파라미터 값 표출 - 이 옵션을 사용하지 않으면 기본적으로 파라미터 값이 무엇인지 알 수 없고, 바인딩 쿼리로그만 찍힘
            type:
                   descriptor:
                      sql: trace





